Get print_int function in assembly_test/math.asm working
    need to pick a calling convention (such as microsoft's cdecl) and implement it
        what is caller-saved and callee-saved registers?

Write assembly routine to print out multiple digits in output
    Need at least the ability to print 10 digits (for 32 bit unsigned/signed integers)
    Can just append it to our compiled assembly

    set counter to 0
    top: 
        if n bigger than 9:
            mod n by 10 to get remainder
            push remainder onto stack
            increment counter
            divide n by 10 to shift to the right
            goto top
        else:
            push number onto stack
            increment counter
    print_char:
        if counter > 0:
            print top of stack
            pop stack
            decrement counter
            goto print_char

    Read about cdecl (microsofts calling convention used in C compiler)
        what's caller-saved and callee-saved registers???

Add in ability to do signed arithmetic
    is this different for addition/subtraction vs multiplication/division?
    Need a way to print negative numbers out too

Add in modulus operator 
    should be easy...right?  One of the registers holds the remainder when using 'div' operation

Floating point arithmetic
    This will require a bit of testing in assembly to see how it works

Idea: Might be easier to start with IA32 (Intel 32-bit assembly)
    convert current arithmetic compiler to use IA32 assembly

    Compare my assembly to what the gnu compiler / compiler explorer generates

    nasm -felf32 <file>.asm
    ld -m elf_i386 <file>.o

Idea: compile to x86 assembly (which we can then assemble to machine code..)
    https://cs.lmu.edu/~ray/notes/nasmtutorial/

Get entire language compiling for arithmetic expressions
    Error
        Make a struct to hold/reorder error messages
        Need line information to make error messages better
    Lexer
        Let lexer recognize variable declaration and assignment
    Parser
        could do recursive descent or the other one (I forget the name)
        will need to define AST nodes too
        Might be easier to make p (the parser) a static variable for now 
            instead of passing a struct Parser* to all parsing functions
    Type Checker
        traverse AST once to catch type errors
    Compiler
        traverse AST again to generate IA32 assembly
