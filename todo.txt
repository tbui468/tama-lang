****************Refactor**************
Assembler::generate_obj requires massive refactor
    too much confusing code/structure - each section appendment should be own function
    section header m_name index into shstrtab is hardcoded
    restructure code to make easier to understand/modify in the future
    
Need to reenable all warnings and fix those - quite a few I think

**************Automatic testing************
Automate tests for compiler - refactors are getting dangerous with just hand-written tests
    have tests test output of programs:
        print(3)
        print(4)

        Should print 3 and 4 on separate lines - automate this with bash/python scripts

**************IR Trees*************************
!Big refactor!
Have semant.cpp output an intermediate representation
Make Optimizer that optimizes IR tree
Make Ir_x86_translator generate x86 from IR

struct IRExpr {

};

struct IRStmt {

};

**********************Linker*******************************
Test using three or more files with more complex dependencies
    main -> math
    main -> other_lib

    math -> other_lib

    Prevent duplicate code:
        When adding a relocatable code, add that filename to a a unordered_map
        check that map before adding code from different relocatable file 
        unordered_map<std::string, int> m_code_offsets; //use the offsets to do relocations instead of summing offsets each time

How should print be part of linking process?
    Could have library written in assembly and compiled to .obj file
        Rather than parsing function declarations, importing 'basic'
        will type check against built-in function types in compiler
    Have function declarations inside of compiler already to type check
    Link library at link time - link standard library

        import basic

        main: () -> int {
            print(42)

            return 0
        }
*********************Documentation****************

Start writing out README file
    can we use that markup language (not html) to format document?
        this seems like a good chance to learn something easier than html
    Motivation
        Why build this? To learn more about the tools
        Why use C? Curious about limitations
    Diagram
    Modules
            TODO: produce non-executable ELF files (to allow linking with other files)
        Linker
            TODO: need to make this

    Building

    ELF executables have read-only and read/write sections:
        using a read/write section will require main function/global variables


********************Resources******************

Read a little more of Ian Lance Taylor's blog or 'Linkers and Loaders'
    to understand differences between ELF relocatable files and ELF executable files
Watch 'Understanding Compiler Optimization - Chandler Carruth' on youtube
Read more of 'Computer Systems: A Programmer's Perspective'
