****************Refactor**************
Assembler::generate_obj requires massive refactor
    too much confusing code/structure - each section appendment should be own function
    section header m_name index into shstrtab is hardcoded
    restructure code to make easier to understand/modify in the future
    
Need to reenable all warnings and fix those

**************Automatic testing************
Automate tests for compiler - refactors are getting dangerous with just hand-written tests
    have tests test output of programs:
        print(3)
        print(4)

        Should print 3 and 4 on separate lines - automate this with bash/python scripts

**************IR Trees*************************
!Big refactor!
Have semant.cpp output an intermediate representation
Make Optimizer that optimizes IR tree
Make Ir_x86_translator generate x86 from IR

struct IRExpr {

};

struct IRStmt {

};

**********************Linker*******************************
Segmentation fault when linking with math.tmd with two functions (add and sub)
    Assembler::generate_obj() is segmentation faulting only when both functions are used!!!! (if only add/sub is used it works fine)
        good chance to refactor function while finding the bug

    refactor Link::link() so that load address 0x08048000 is not hard coded in Link::link() a bunch of times
        should remove patch_addr_offsets in assembler.cpp and ORG keyword in assembler.hpp - not using this now since linker will 
            take care of load address offset now
    still not happy with the +4 with PC relocations in Linker - why don't we have this when patch relative jumps in assembler?

Use readelf to analyze .o files
    Compile to 32-bit elf:
        gcc -c -mx32 test.c (will output test.o)
        gcc -c -m elf_i386 main.c (same as -mx32?)
        use -fno-asynchronous-unwind-tables to get rid of eh_frame (what's the purpose of this?)

    readelf -h test.o (see header)

    readelf -x .text test.o (hexdump text section)

*********************Documentation****************

Start writing out README file
    can we use that markup language (not html) to format document?
        this seems like a good chance to learn something easier than html
    Motivation
        Why build this? To learn more about the tools
        Why use C? Curious about limitations
    Diagram
    Modules
            TODO: produce non-executable ELF files (to allow linking with other files)
        Linker
            TODO: need to make this

    Building

    ELF executables have read-only and read/write sections:
        using a read/write section will require main function/global variables


********************Resources******************

Read a little more of Ian Lance Taylor's blog or 'Linkers and Loaders'
    to understand differences between ELF relocatable files and ELF executable files
Watch 'Understanding Compiler Optimization - Chandler Carruth' on youtube
Read more of 'Computer Systems: A Programmer's Perspective'
