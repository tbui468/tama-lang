****************Refactor**************
Need to reenable all warnings and fix those - quite a few I think

**************Automatic testing************
Automate tests for compiler - refactors are getting dangerous with just hand-written tests
    have tests test output of programs:
        print(3)
        print(4)

        Should print 3 and 4 on separate lines - automate this with bash/python scripts

**************IR Trees*************************
!Big refactor!
Have semant.cpp output an intermediate representation
Make Optimizer that optimizes IR tree
Make Ir_x86_translator generate x86 from IR

struct IRExpr {

};

struct IRStmt {

};

**********************Basic Library*******************************
Basic library can be an .asm file for system calls
Make a file basic.tmd with empty bodies just for type checking during import of 'basic'
How to deal with overloading functions (eg, print(5) vs print(true))
    just using AST to deal with this currently
*********************Documentation****************

Start writing out README file
    can we use that markup language (not html) to format document?
        this seems like a good chance to learn something easier than html
    Motivation
        Why build this? To learn more about the tools
        Why use C? Curious about limitations
    Diagram
    Modules
            TODO: produce non-executable ELF files (to allow linking with other files)
        Linker
            TODO: need to make this

    Building

    ELF executables have read-only and read/write sections:
        using a read/write section will require main function/global variables


********************Resources******************

Read a little more of Ian Lance Taylor's blog or 'Linkers and Loaders'
    to understand differences between ELF relocatable files and ELF executable files
Watch 'Understanding Compiler Optimization - Chandler Carruth' on youtube
Read more of 'Computer Systems: A Programmer's Perspective'
