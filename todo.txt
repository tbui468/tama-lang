********************Redo************************
Make fetch / store functions for x86 to get rid of repeated code (if/else to check for ints is annoying)

void fetch(const std::string& dst, const std::string& src);
void store(const std::string& dst, const std::string& src);

Add constant folding for logical operators (<, >, <=, >=, ==, !=, and, or)


****************Basic Blocks**********************
Basic Blocks and Traces
	Need a clearer reason to try this


***************Allocate registers*********************
Need to make inference graph and do some node coloring


Read lecture 16
Read chapter in book
K-coloring and allocate registers for x86

***************Optimization********************
Compiler should accept flag to turn on/off optimizer

Read Slides13
Read lecture 14, lecture 15, lecture 16
Read 240 TAC examples

Dead code elimination
    check target of each quad
    if that target is not used in operand1 or oprand2 of any other quad, delete that quad
    emit warning telling use code is unused

********************More Optimization********************
***************************Reorganize Quads basic-blocks*******************
    Each instruction after label is start of block - the leader (this takes care of function definitions)
    Start at each leader and move down quads until we find next leader - previous is end of block (also takes care of functions)
    Need to create CFG during this time (nodes are blocks, and edges (jumps) connect blocks)

    class TacBlock {
        public:
            TacLabel* m_label;
            TacQuad* m_begin;
            TacQuad* m_end; //one after end of block
    };

    std::vector<TacBlock> m_blocks;
    
    struct TacEdge {
        int m_from;
        int m_to;
        TacEdge(int from, int to): m_from(from), m_to(to) {}
    };

    std::vector<TacEdge> m_edges;


****************Control-Flow Graph**********************
What about trace scheduling? (Mentioned in Modern Compiler Implementation in C book, but not in standford lectures)

***************SSA*************************
Could transform to SSA IR and do more optimizations

*********************Documentation****************

Start writing out README file
    can we use that markup language (not html) to format document?
        this seems like a good chance to learn something easier than html
    Motivation
        Why build this? To learn more about the tools
        Why use C? Curious about limitations
    Diagram
    Modules
            TODO: produce non-executable ELF files (to allow linking with other files)
        Linker
            TODO: need to make this

    Building

    ELF executables have read-only and read/write sections:
        using a read/write section will require main function/global variables


********************Resources******************

Read a little more of Ian Lance Taylor's blog or 'Linkers and Loaders'
    to understand differences between ELF relocatable files and ELF executable files
Watch 'Understanding Compiler Optimization - Chandler Carruth' on youtube
Read more of 'Computer Systems: A Programmer's Perspective'
