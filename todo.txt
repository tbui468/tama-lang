Read a little more of 'Computer Systems: A Programmer's Perspective'

Parentheses tokens and parsing
    just call parse from the beginning again if we reach the parse_group,
        and consume the final RIGHT_PAREN

print keyword and statements vs expressions
    print 4 + 5 - 6  (expression inside a statement)
    4 * 8           (expression statement - the value is popped)

    NODE_EXPR - leaves a value on the stack after running
    NODE_EXPR_STMT - pops the stack after running
    NODE_STMT - leaves nothing on the stack after running

variables

boolean data type

conditional statements

Add in modulus operator 
    should be easy...right?  One of the registers holds the remainder when using 'div' operation
    but what about trying to modulus with negative numbers?

Need to deal with overflow with multiplication/add

Floating point arithmetic
    This will require a bit of testing in assembly to see how it works

Idea: compile to x86 assembly (which we can then assemble to machine code..)
    https://cs.lmu.edu/~ray/notes/nasmtutorial/

Get entire language compiling for arithmetic expressions
    Error
        Make a struct to hold/reorder error messages
        Need line information to make error messages better
    Lexer
        Let lexer recognize variable declaration and assignment
    Parser
        could do recursive descent or the other one (I forget the name)
        will need to define AST nodes too
        Might be easier to make p (the parser) a static variable for now 
            instead of passing a struct Parser* to all parsing functions
    Type Checker
        traverse AST once to catch type errors
    Compiler
        traverse AST again to generate IA32 assembly
