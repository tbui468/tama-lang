**************IR*************************
Read Slides13
Read lecture 14, lecture 15, lecture 16
Read 240 TAC examples

****************Implement emit_ir*****************************
Can use similar algorithm as in translate(Semant& s);

Finish emit_ir for all tmdAst nodes
    Block
    If
    While
    Call
    Return
    Import

Integrate X86Frames (eg, allocate formal parameters and locals - all temps now)
    Need to add formal parameters in FunDef node - set m_tac_symbol to empty string
    Need to add locals in DeclSym - m_tac_symbol needs to be unique

*************************Optimizer**********************************

***************************Reorganize Quads basic-blocks*********************
    Each instruction after label is start of block - the leader (this takes care of function definitions)
    Start at each leader and move down quads until we find next leader - previous is end of block (also takes care of functions)
    Need to create CFG during this time (nodes are blocks, and edges (jumps) connect blocks)

    class TacBlock {
        public:
            TacLabel* m_label;
            TacQuad* m_begin;
            TacQuad* m_end; //one after end of block
    };

    std::vector<TacBlock> m_blocks;
    
    struct TacEdge {
        int m_from;
        int m_to;
        TacEdge(int from, int to): m_from(from), m_to(to) {}
    };

    std::vector<TacEdge> m_edges;


****************Control-Flow Graph**********************
What about trace scheduling? (Mentioned in Modern Compiler Implementation in C book, but not in standford lectures)

***************Optimization********************
just do constant folding or something simple for now

***************SSA******************************
Could transform to SSA IR and do more optimizations

***************Allocate registers*********************
K-coloring to fit 3 (or 6 registers).

******************Emit x86 from TAC***********************
Use assembler and linker to check if final output works

*********************Documentation****************

Start writing out README file
    can we use that markup language (not html) to format document?
        this seems like a good chance to learn something easier than html
    Motivation
        Why build this? To learn more about the tools
        Why use C? Curious about limitations
    Diagram
    Modules
            TODO: produce non-executable ELF files (to allow linking with other files)
        Linker
            TODO: need to make this

    Building

    ELF executables have read-only and read/write sections:
        using a read/write section will require main function/global variables


********************Resources******************

Read a little more of Ian Lance Taylor's blog or 'Linkers and Loaders'
    to understand differences between ELF relocatable files and ELF executable files
Watch 'Understanding Compiler Optimization - Chandler Carruth' on youtube
Read more of 'Computer Systems: A Programmer's Perspective'
