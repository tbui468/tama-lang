****************Refactor******************
Replace C-style enum with type-safe C++ enum class

Replace TokenArray with just std::vector<Token>

Add COLON_COLON token for static symbols

**************What programs can I write with tamarind***********
blockchain
    gossip network

****************print***********************
assemble basic.asm into basic.obj
create header files for basic.tmd with just function headers to import
basic.tmd

double colons for declaring static data (functions, structs, global variables)

print::(a: int) -> nil {
}
print::(b: bool) -> nil {
}

can type information be saved in .obj file?
    How does C know types when linking?
    it would be better if we could save
    type information directly in .obj and have linker do type checking


******************arrays***********************
b :: int = 23

main :: () -> int {
    a: int = 9
    b: int[4] = {0, 1, 3, 5} //array with 4 numbers
    b[0] = 5
    c: int[100] = {0} //array of 100 zeros
    d: int[20] = {13} //array with 20 13s
    return b[0]
}

**************string type**********************
*may need to delay this until we can allocate memory
s: string = "Hello world"

len(s)
s[re] = 

******************structs***********************
Dog :: struct {
    name: string,
    age: int
}

*****************for loops*********************
for i in 0..10 {
    print(i)
}

0..10 produces a sequence of numbers, inclusive
***************dynamic allocation***************
    a: int* = alloc(224)
    b: bool* = alloc(true)
    c: Dog* = alloc("Mittens", 24)
    [c].name = "Russell"
    [c].age = 242
    print([a])
    free(a)
    free(b)

***************Register Allocation**************
Iterate through each block and assign registers
    analyze liveness of temps (true and local?)
    assign temps (true) to registers
    remove any register-allcoated true temps (NOT local temps since they could be used in other blocks) from frame

Iterate through allocated frame stack offsets for true/local temps and look for gaps
    if any stack offset has no true/local temps, decrement all true/local temps with higher offset to fill gap


For a given BasicBlock, find all variables (should start with _t)
For a given variable, find live range (if used on line n, the live range is {n-1, n})
For two given variables, if no ranges are shared, they can share the same register
Need an algorithm to assign variables to set number of registers

myadd: (a: int, b: int) -> int {
    return a + b
}
main: () -> int {
    x: int = 1
    y: int = 5
    z: int = x + y
    return z
}

main:
    push    ebp
    mov     ebp, esp
    sub     esp, 16
    *****this block is simplified to 3 lines******
    mov     eax, 1
    mov     [ebp + -4], eax
    mov     eax, 5
    mov     [ebp + -8], eax
    mov     eax, [ebp + -4]
    mov     ecx, [ebp + -8]
    add     eax, ecx
    mov     [ebp + -16], eax
    mov     eax, [ebp + -16]
    ******************************************
    add     esp, 16
    pop     ebp
    ret


Two registers needed (eax and ecx)

1. _t1x - live range is {2->3}
2. _t2y - live range is {2->3}
3. _t3 - live range is {3->4}
4. _t4z - live range is {4->5}

Assign each temp a register:
_t1x = eax
_t2y = ecx
_t3 = eax
_t4z = eax

mov     eax, 1
mov     ecx, 5
add     eax, ecx
mov     eax, eax - can remove
mov     eax, eax - can remove
mov     eax, eax - can remove

****************SSA********************
class SSATransformer {
    std::vector<Block> create_basic_blocks(const std::vector<TacQuad>& quads);
    std::vector<SSAQuad> create_ssa_form(const std::vector<TacQuad>& quads, const std::vector<Block>& blocks);
};

Need to create basic blocks first
Then disallow reassignment (make a new temp to prevent this)
Need to track the base variable/most current derived variable so 
    that the most recent value can be used
Add phi nodes when a block has two or more predecessors that (may?) change a variable

***************Optimization********************
Compiler should accept flag to turn on/off optimizer

Read Slides13
Read lecture 14, lecture 15, lecture 16
Read 240 TAC examples

********************More Optimization********************
Copy propagation
Constant folding
Dead code elimination

***************SSA*************************
Could transform to SSA IR and do more optimizations

*********************Documentation****************

Start writing out README file
    can we use that markup language (not html) to format document?
        this seems like a good chance to learn something easier than html
    Motivation
        Why build this? To learn more about the tools
        Why use C? Curious about limitations
    Diagram
    Modules
            TODO: produce non-executable ELF files (to allow linking with other files)
        Linker
            TODO: need to make this

    Building

    ELF executables have read-only and read/write sections:
        using a read/write section will require main function/global variables


********************Resources******************

Read a little more of Ian Lance Taylor's blog or 'Linkers and Loaders'
    to understand differences between ELF relocatable files and ELF executable files
Watch 'Understanding Compiler Optimization - Chandler Carruth' on youtube
Read more of 'Computer Systems: A Programmer's Perspective'
