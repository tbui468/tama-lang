Get the compiler working with integer arithmetic (with result being single digit)
    push, pop and using write syscall to print out result

Write assembly routine to print out multiple digits in output

Add in modulus operator 

Add in ability to do signed arithmetic

Then write some assembly to print numbers with mulitple digits
    need to include up to 10 digits if using 32 bit integers (one-billions place)
    can just put this in my c program as a constant char* once the routine works
        and just append to the resulting .asm file that we produce

Idea: Might be easier to start with IA32 (Intel 32-bit assembly)
    convert current arithmetic compiler to use IA32 assembly

    Compare my assembly to what the gnu compiler / compiler explorer generates

    nasm -felf32 <file>.asm
    ld -m elf_i386 <file>.o

Idea: compile to x86 assembly (which we can then assemble to machine code..)
    https://cs.lmu.edu/~ray/notes/nasmtutorial/

Goal: Strengthen those atrophed programming muscles
Goal: Use Unix system calls appropriately (eg, check for errors)
Goal: split the typer and compiler
Goal: Add in coroutines (eg, async and await) using threads
Goal: Keep it simple (eg, no multiple returns/multipass compiler) for now

Get entire language compiling for arithmetic expressions
    Error
        Make a struct to hold/reorder error messages
        Need line information to make error messages better
    Lexer
        Let lexer recognize multiple digit numbers (only recognizing single digits now)
    Parser
        could do recursive descent or the other one (I forget the name)
        will need to define AST nodes too
        Might be easier to make p (the parser) a static variable for now 
            instead of passing a struct Parser* to all parsing functions
    Type Checker
        traverse AST once to catch type errors
    Compiler
        traverse AST again to generate bytecode
    VM
        run the bytecode - for now just have the vm printf the result on the stack when it ends

    REPL
