Goal: Strengthen those atrophed programming muscles
Goal: Use Unix system calls appropriately (eg, check for errors)
Goal: split the typer and compiler
Goal: Add in coroutines (eg, async and await) using threads
Goal: Keep it simple (eg, no multiple returns/multipass compiler) for now

Get entire language compiling for arithmetic expressions
    Lexer
        Let lexer recognize multiple digit numbers (only recognizing single digits now)
    Parser
        could do recursive descent or the other one (I forget the name)
        will need to define AST nodes too
        Might be easier to make p (the parser) a static variable for now 
            instead of passing a struct Parser* to all parsing functions
    Typer
        traverse AST once to catch type errors
    Compiler
        traverse AST again to generate bytecode
    VM
        run the bytecode - for now just have the vm printf the result on the stack when it ends
